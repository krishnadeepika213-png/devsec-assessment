name: CI / CD - build, scan, push, deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write   # required if you switch to OIDC (recommended)

env:
  IMAGE_NAME: myapp           # change to your image name
  NODE_VERSION: 20

jobs:
  build-test:
    name: Install / Lint / Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint || true    # adjust or remove `|| true` depending on strictness

      - name: Run tests
        run: npm test

  build-push-scan-deploy:
    name: Build → Scan → Push → Deploy
    needs: build-test
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}   # e.g. my-ecr-repo
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          # optionally add: cache-from, platforms, build-args

      - name: Scan pushed image with Trivy
        uses: aquasecurity/trivy-action@v0
        with:
          image-ref: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '1'            # fail the job if any HIGH/CRITICAL (adjust as you like)
          severity: 'CRITICAL,HIGH'

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Deploy to EKS (set image)
        run: |
          # assumes a Deployment named 'myapp' in namespace 'default' and container named 'myapp'
          kubectl set image deployment/myapp myapp=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} --record
          kubectl rollout status deployment/myapp --timeout=120s
